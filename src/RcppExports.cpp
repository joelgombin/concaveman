// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_concaveman
Rcpp::DataFrame rcpp_concaveman(Rcpp::NumericMatrix xy, Rcpp::IntegerVector hull_in, const double concavity, const double length_threshold);
RcppExport SEXP _concaveman_rcpp_concaveman(SEXP xySEXP, SEXP hull_inSEXP, SEXP concavitySEXP, SEXP length_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xy(xySEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type hull_in(hull_inSEXP);
    Rcpp::traits::input_parameter< const double >::type concavity(concavitySEXP);
    Rcpp::traits::input_parameter< const double >::type length_threshold(length_thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_concaveman(xy, hull_in, concavity, length_threshold));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_concaveman_rcpp_concaveman", (DL_FUNC) &_concaveman_rcpp_concaveman, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_concaveman(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
