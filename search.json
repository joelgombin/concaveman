[{"path":"https://joelgombin.github.io/concaveman/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joël Gombin. Maintainer, author. Ramnath Vaidyanathan. Author. Vladimir Agafonkin. Author. Mapbox. Copyright holder.","code":""},{"path":"https://joelgombin.github.io/concaveman/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gombin J, Vaidyanathan R, Agafonkin V (2025). concaveman: Fast 2D Concave Hull Algorithm. R package version 1.2.0, https://joelgombin.github.io/concaveman/.","code":"@Manual{,   title = {concaveman: A Very Fast 2D Concave Hull Algorithm},   author = {Joël Gombin and Ramnath Vaidyanathan and Vladimir Agafonkin},   year = {2025},   note = {R package version 1.2.0},   url = {https://joelgombin.github.io/concaveman/}, }"},{"path":"https://joelgombin.github.io/concaveman/index.html","id":"concaveman","dir":"","previous_headings":"","what":"concaveman","title":"A Very Fast 2D Concave Hull Algorithm","text":"fast 2D concave hull algorithm JavaScript Vladimir Agafonkin, wrapped R (generates general outline point set).","code":"library(concaveman) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(purrr) library(sf) #> Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1 library(tmap) data(points) polygons <- map(unique(points$k),                        ~ concaveman(points[points$k %in% .,])                        ) %>%    map2(unique(points$k), ~ mutate(.x, k = .y)) %>%    reduce(rbind) tm_shape(points) +  tm_dots(col = \"k\", size = 0.1, legend.show = FALSE) + tm_shape(polygons) +  tm_fill(col = \"k\", alpha = 0.5, legend.show = FALSE) +  tm_borders() + tm_layout(frame = FALSE)"},{"path":"https://joelgombin.github.io/concaveman/index.html","id":"installation","dir":"","previous_headings":"concaveman","what":"Installation","title":"A Very Fast 2D Concave Hull Algorithm","text":"concaveman can installed CRAN: can also install dev version github:","code":"install.packages(\"concaveman\") devtools::install_github(\"joelgombin/concaveman\")"},{"path":"https://joelgombin.github.io/concaveman/index.html","id":"usage","dir":"","previous_headings":"concaveman","what":"Usage","title":"A Very Fast 2D Concave Hull Algorithm","text":"Signature: concaveman(points, concavity = 2, lengthThreshold = 0) points Can represented matrix coordinates sf object. concavity relative measure concavity. 1 results relatively detailed shape, Infinity results convex hull. can use values lower 1, can produce pretty crazy shapes. length_threshold: segment length threshold, stops considered detalization. Higher values result simpler shapes.","code":"library(concaveman) library(dplyr) library(purrr) library(sf) library(tmap) data(points) polygons <- concaveman(points) polygons #> Simple feature collection with 1 feature and 0 fields #> geometry type:  POLYGON #> dimension:      XY #> bbox:           xmin: -122.0844 ymin: 37.3696 xmax: -122.0587 ymax: 37.3942 #> CRS:            +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0 #> # A tibble: 1 x 1 #>                                                                         polygons #>                                                                    <POLYGON [°]> #> 1 ((-122.0809 37.3736, -122.0813 37.3764, -122.0812 37.3767, -122.082 37.3772, …  polygons2 <- map(unique(points$k),                  ~ concaveman(points[points$k %in% .,])                  ) %>%    map2(unique(points$k), ~ mutate(.x, k = .y)) %>%    reduce(rbind) tm_shape(points) +  tm_dots(col = \"k\", size = 0.1, legend.show = FALSE) + tm_shape(polygons2) +  tm_fill(col = \"k\", alpha = 0.5, legend.show = FALSE) +  tm_borders() + tm_layout(frame = FALSE) #> Warning: The shape polygons2 is invalid. See sf::st_is_valid"},{"path":"https://joelgombin.github.io/concaveman/index.html","id":"algorithm","dir":"","previous_headings":"concaveman","what":"Algorithm","title":"A Very Fast 2D Concave Hull Algorithm","text":"algorithm based ideas paper New Concave Hull Algorithm Concaveness Measure n-dimensional Datasets, 2012 Jin-Seo Park Se-Jong Oh. implementation Vladimir Agafonkin dramatically improves performance one stated paper (O(rn), r number output points, O(n log n)) introducing fast k nearest points segment algorithm, modification depth-first kNN R-tree search using priority queue.","code":""},{"path":"https://joelgombin.github.io/concaveman/reference/concaveman-package.html","id":null,"dir":"Reference","previous_headings":"","what":"concaveman: A very fast 2D concave hull algorithm. — concaveman-package","title":"concaveman: A very fast 2D concave hull algorithm. — concaveman-package","text":"package simple R port (V8) JavaScript library Vladimir Agafonkin.","code":""},{"path":[]},{"path":"https://joelgombin.github.io/concaveman/reference/concaveman-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"concaveman: A very fast 2D concave hull algorithm. — concaveman-package","text":"Maintainer: Joël Gombin joel.gombin@gmail.com Authors: Ramnath Vaidyanathan Vladimir Agafonkin contributors: Mapbox [copyright holder]","code":""},{"path":"https://joelgombin.github.io/concaveman/reference/concaveman.html","id":null,"dir":"Reference","previous_headings":"","what":"A very fast 2D concave hull algorithm — concaveman","title":"A very fast 2D concave hull algorithm — concaveman","text":"concaveman function ports concaveman library mapbox. computes concave polygon one set points.","code":""},{"path":"https://joelgombin.github.io/concaveman/reference/concaveman.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A very fast 2D concave hull algorithm — concaveman","text":"","code":"concaveman(points, concavity, length_threshold)  # S3 method for class 'matrix' concaveman(points, concavity = 2, length_threshold = 0)  # S3 method for class 'sf' concaveman(points, concavity = 2, length_threshold = 0)  # S3 method for class 'sfc' concaveman(points, concavity = 2, length_threshold = 0)"},{"path":"https://joelgombin.github.io/concaveman/reference/concaveman.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A very fast 2D concave hull algorithm — concaveman","text":"points points concave hull must computed. Can represented matrix coordinates sf object. concavity relative measure concavity. 1 results relatively detailed shape, Infinity results convex hull. can use values lower 1, can produce pretty crazy shapes. length_threshold segment length threshold, stops considered detalization. Higher values result simpler shapes.","code":""},{"path":"https://joelgombin.github.io/concaveman/reference/concaveman.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A very fast 2D concave hull algorithm — concaveman","text":"object class points: matrix coordinates sf object.","code":""},{"path":"https://joelgombin.github.io/concaveman/reference/concaveman.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A very fast 2D concave hull algorithm — concaveman","text":"details regarding implementation, please see original javascript library github page. just thin wrapper, via V8.","code":""},{"path":"https://joelgombin.github.io/concaveman/reference/concaveman.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A very fast 2D concave hull algorithm — concaveman","text":"","code":"data(points) polygons <- concaveman(points) plot(points) plot(polygons, add = TRUE)"},{"path":"https://joelgombin.github.io/concaveman/reference/points.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixtures data — points","title":"Fixtures data — points","text":"just test dataset comes original mapbox library.","code":""},{"path":"https://joelgombin.github.io/concaveman/reference/points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixtures data — points","text":"","code":"points"},{"path":"https://joelgombin.github.io/concaveman/reference/points.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fixtures data — points","text":"sf object 1000 points. part group, indicated variable k (generated k-means algorithm).","code":""},{"path":"https://joelgombin.github.io/concaveman/reference/points.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Fixtures data — points","text":"https://github.com/mapbox/concaveman/blob/master/test/fixtures/points-1k.json","code":""},{"path":"https://joelgombin.github.io/concaveman/news/index.html","id":"concaveman-120","dir":"Changelog","previous_headings":"","what":"concaveman 1.2.0","title":"concaveman 1.2.0","text":"got rid dplyr magrittr dependencies (thanks @josiahparry)","code":""},{"path":"https://joelgombin.github.io/concaveman/news/index.html","id":"concaveman-110","dir":"Changelog","previous_headings":"","what":"concaveman 1.1.0","title":"concaveman 1.1.0","text":"CRAN release: 2020-05-11 Support SpatialPoint classes removed. now advised transform data sf format outside concaveman function. fixes comply dplyr 1.0 sf 0.9","code":""},{"path":"https://joelgombin.github.io/concaveman/news/index.html","id":"concaveman-100","dir":"Changelog","previous_headings":"","what":"concaveman 1.0.0","title":"concaveman 1.0.0","text":"CRAN release: 2017-07-25 initial release supports different input output formats (matrix coordinates, SpatialPoints*, sf)","code":""}]
